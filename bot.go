package main

import (
	"log"
	"strconv"
	"time"

	"./mongo"
	"./userlogic"
	"./votes"
	"./waves"
	"github.com/vjeantet/jodaTime"

	mgo "gopkg.in/mgo.v2"
	tb "gopkg.in/tucnak/telebot.v2"
)

var session *mgo.Session

// var proj1 = "*–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è:* –§–æ–Ω–¥ –ù–µ–°–∫–∞–º\n\n*–ê–¥—Ä–µ—Å:* liwjbfiowbupiweubpwbep\n\n*–¢–µ–º–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è:* –ì–æ–ª–æ—Å—É–µ–º –∑–∞ —Ç–æ, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Å—Ç–∏ –Ω–æ–≤–æ–µ ICO\n\n*–£—Å–ª–æ–≤–∏—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è:* –∏–º–µ—Ç—å –±–æ–ª—å—à–µ 100 noscum —Ç–æ–∫–µ–Ω–æ–≤\n\n*–í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è:* 9 –ê–ø—Ä–µ–ª—è, 00:01 (MSK)"
var proj1 []string
var proj2 = "*–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è:*  ------\n\n*–ê–¥—Ä–µ—Å:* ------\n\n*–¢–µ–º–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è:* ------\n\n*–£—Å–ª–æ–≤–∏—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è:* ------\n\n*–í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è:* ------"
var proj3 = "*–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è:*  ---------\n\n*–ê–¥—Ä–µ—Å:* ------\n\n*–¢–µ–º–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è:* ---------\n\n*–£—Å–ª–æ–≤–∏—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è:* ---------\n\n*–í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è:* ------"
var proj4 = "*–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è:*  ---------------\n\n*–ê–¥—Ä–µ—Å:* ---------\n\n*–¢–µ–º–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è:* ------------\n\n*–£—Å–ª–æ–≤–∏—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è:* ------------\n\n*–í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è:* ------"
var choseproj = ""
var yesnores = ""
var enterName = false
var enterData = false
var golosTheme = ""
var golosData = ""

func main() {
	b, err := tb.NewBot(tb.Settings{
		Token: "586866387:AAHmxTxHOUxZyjhauJ3yxedpPTWUpNxLUQE", // t.me/waves_vote_bot  –¥–ª—è –ù–∏–∫–∏—Ç—ã
		// Token:  "595106358:AAFyY_w1SNHReDF2j9eQQjhNHBIhElDU_QY", // t.me/test_waves_vote_bot –¥–ª—è –ö–∏—Ä–∏–ª–ª–∞
		Poller: &tb.LongPoller{Timeout: 10 * time.Second},
	})

	if err != nil {
		log.Fatal(err)
		return
	}
	session := mongo.ConnectToMongo()

	// –ö–Ω–æ–ø–∫–∏ –∏ –º–µ–Ω—é
	mainData := tb.ReplyButton{Text: "üí≥ –ú–æ–π –∫–∞–±–∏–Ω–µ—Ç"}
	votingData := tb.ReplyButton{Text: "üìç –¢–µ–∫—É—â–∏–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è"}
	createVote := tb.ReplyButton{Text: "üîñ –°–æ–∑–¥–∞—Ç—å –ª–∏—á–Ω–æ–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ"}
	mainMenu := [][]tb.ReplyButton{{mainData}, {votingData}, {createVote}}

	viewRes := tb.InlineButton{Unique: "viewres", Text: "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å, –≥–¥–µ —è –≥–æ–ª–æ—Å–æ–≤–∞–ª"}
	viewMy := tb.InlineButton{Unique: "viewMy", Text: "–°–æ–∑–¥–∞–Ω–Ω—ã–µ –º–Ω–æ–π –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è"}
	viewMenu := [][]tb.InlineButton{{viewRes}, {viewMy}}

	// listVote1 := tb.InlineButton{Unique: "listvote1", Text: "–°—Ç—Ä–∞–Ω–∏—Ü–∞ 1"}
	// listVote2 := tb.InlineButton{Unique: "listvote2", Text: "–°—Ç—Ä–∞–Ω–∏—Ü–∞ 2"}
	// listVote3 := tb.InlineButton{Unique: "listvote3", Text: "–°—Ç—Ä–∞–Ω–∏—Ü–∞ 3"}
	// listVote4 := tb.InlineButton{Unique: "listvote4", Text: "–°—Ç—Ä–∞–Ω–∏—Ü–∞ 4"}

	// vote1 := tb.InlineButton{Unique: "vote1", Text: "–ü—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞—Ç—å –∑–∞ 1"}
	// vote2 := tb.InlineButton{Unique: "vote2", Text: "–ü—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞—Ç—å –∑–∞ 2"}
	// vote3 := tb.InlineButton{Unique: "vote3", Text: "–ü—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞—Ç—å –∑–∞ 3"}
	// vote4 := tb.InlineButton{Unique: "vote4", Text: "–ü—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞—Ç—å –∑–∞ 4"}

	menu := tb.InlineButton{Unique: "menu", Text: "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"}

	// menuVote1 := [][]tb.InlineButton{{vote1}, {listVote2, listVote3, listVote4}, {menu}}
	// menuVote2 := [][]tb.InlineButton{{vote2}, {listVote1, listVote3, listVote4}, {menu}}
	// menuVote3 := [][]tb.InlineButton{{vote3}, {listVote1, listVote2, listVote4}, {menu}}
	// menuVote4 := [][]tb.InlineButton{{vote4}, {listVote1, listVote2, listVote3}, {menu}}

	yes := tb.InlineButton{Unique: "yes", Text: "‚úÖ –ó–∞"}
	no := tb.InlineButton{Unique: "no", Text: "‚ùå –ü—Ä–æ—Ç–∏–≤"}
	yesno := [][]tb.InlineButton{
		{yes, no}, {menu}}

	cancel := tb.ReplyButton{Text: "–û—Ç–º–µ–Ω–∞"}
	cancelMenu := [][]tb.ReplyButton{{cancel}}

	voteyes := tb.ReplyButton{Text: "‚úÖ –î–∞, —É–≤–µ—Ä–µ–Ω"}
	voteno := tb.ReplyButton{Text: "‚ùå –ù–µ—Ç"}
	voteyesno := [][]tb.ReplyButton{{voteyes, voteno}}

	voteyes2 := tb.ReplyButton{Text: "‚úÖ –°–æ–∑–¥–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ"}
	voteno2 := tb.ReplyButton{Text: "‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∏—Ç—å"}
	voteyesno2 := [][]tb.ReplyButton{{voteyes2, voteno2}}
	// –ö–Ω–æ–ø–∫–∏ –∏ –º–µ–Ω—é

	// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
	b.Handle("/start", func(m *tb.Message) {
		var userID = strconv.Itoa(m.Sender.ID)

		if userlogic.Auth(session, userID) != true {
			var name = string(m.Sender.Username)
			var seed = waves.CreateSeed(userID, name)
			var address = waves.GetAddress(userID, seed)
			var msg = "–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ!\n\n"
			msg += "–í–∞—à *Seed:* "
			msg += seed
			msg += "\n\n"
			msg += "–í–∞—à *Address:* "
			msg += address
			b.Send(m.Sender, msg, &tb.SendOptions{DisableWebPagePreview: true, ParseMode: "Markdown"})
		}
		b.Send(m.Sender, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", &tb.SendOptions{ParseMode: "Markdown"}, &tb.ReplyMarkup{ResizeReplyKeyboard: true, ReplyKeyboard: mainMenu})

	})
	b.Handle(&cancel, func(m *tb.Message) {
		golosTheme = ""
		golosData = ""
		enterData = false
		enterName = false
		b.Send(m.Sender, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", &tb.SendOptions{ParseMode: "Markdown"}, &tb.ReplyMarkup{ResizeReplyKeyboard: true, ReplyKeyboard: mainMenu})
	})
	b.Handle(&mainData, func(m *tb.Message) {
		var userID = strconv.Itoa(m.Sender.ID)
		user := mongo.FindUser(session, userID)
		seed := waves.DecryptSeed(userID, user.EncryptedSeed)
		balance := waves.GetBalance(user.Address, "Waves")
		var msg = "–í–∞—à –ø—É–±–ª–∏—á–Ω—ã–π –∞–¥—Ä–µ—Å: "
		msg += user.Address
		msg += "\n\n–í–∞—à seed: "
		msg += seed
		msg += "\n\n–í–∞—à –±–∞–ª–∞–Ω—Å: "
		msg += balance
		// msg += " (–†–£–ë)"
		msg += "\n\n–¢—É—Ç –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ—à–ª—ã—Ö –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–π"
		b.Send(m.Sender, msg, &tb.SendOptions{ParseMode: "Markdown"}, &tb.ReplyMarkup{InlineKeyboard: viewMenu})
	})
	b.Handle(&viewRes, func(c *tb.Callback) {
		b.Edit(c.Message, &tb.SendOptions{ParseMode: "Markdown"}, "–¢—É—Ç –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫—É–¥–∞ –∏ –∫–∞–∫ –≤—ã –≥–æ–ª–æ—Å–æ–≤–∞–ª–∏, –∞ —Ç–∞–∫–∂–µ —É–∑–Ω–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
		b.Respond(c, &tb.CallbackResponse{})
	})
	b.Handle(&votingData, func(m *tb.Message) {
		var msg = "–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–π:\n\n"

		votes := mongo.FindAllVotes(session)
		votesCount := len(votes)
		counter := 0
		if votesCount != 0 {
			for key := range votes {
				msg += "*–û–ø–∏—Å–∞–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è:* \n" + votes[key].Description + "\n"
				msg += "*–ß—Ç–æ–±—ã –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞—Ç—å* –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ /"
				msg += "vote" + strconv.Itoa(counter) + "\n\n"
				counter++
			}

		} else {
			msg += "–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –µ—â—ë –Ω–µ –±—ã–ª–∏ —Å–æ–∑–¥–∞–Ω—ã"
		}

		b.Send(m.Sender, msg, &tb.SendOptions{ParseMode: "Markdown"})
	})

	b.Handle("/vote0", func(m *tb.Message) {
		votes1 := mongo.FindAllVotes(session)
		startDate := jodaTime.Format("YYYY.MM.dd HH:mm", votes1[0].StartTime)
		endDate := jodaTime.Format("YYYY.MM.dd HH:mm", votes1[0].EndTime)
		choseproj = "0"
		msg := "*–û–ø–∏—Å–∞–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è:* \n" + votes1[0].Description + "\n"
		msg += "*–ù–∞—á–∞–ª–æ:* \n" + (startDate) + "\n"
		msg += "*–û–∫–æ–Ω—á–∞–Ω–∏–µ:* \n" + (endDate) + "\n"
		msg += "*–ó–∞–∫–æ–Ω—á–µ–Ω–æ –ª–∏:* \n"
		if votes1[0].End {
			msg += "–î–ê"
		} else {
			msg += "–ù–ï–¢"
		}
		b.Send(m.Sender, msg, &tb.SendOptions{ParseMode: "Markdown"}, &tb.ReplyMarkup{InlineKeyboard: yesno})
	})
	b.Handle("/vote1", func(m *tb.Message) {
		votes1 := mongo.FindAllVotes(session)
		startDate := jodaTime.Format("YYYY.MM.dd HH:mm", votes1[1].StartTime)
		endDate := jodaTime.Format("YYYY.MM.dd HH:mm", votes1[1].EndTime)
		choseproj = "1"
		msg := "*–û–ø–∏—Å–∞–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è:* \n" + votes1[1].Description + "\n"
		msg += "*–ù–∞—á–∞–ª–æ:* \n" + (startDate) + "\n"
		msg += "*–û–∫–æ–Ω—á–∞–Ω–∏–µ:* \n" + (endDate) + "\n"
		msg += "*–ó–∞–∫–æ–Ω—á–µ–Ω–æ –ª–∏:* \n"
		if votes1[1].End {
			msg += "–î–ê"
		} else {
			msg += "–ù–ï–¢"
		}
		b.Send(m.Sender, msg, &tb.SendOptions{ParseMode: "Markdown"}, &tb.ReplyMarkup{InlineKeyboard: yesno})
	})

	b.Handle("/vote2", func(m *tb.Message) {
		votes1 := mongo.FindAllVotes(session)
		startDate := jodaTime.Format("YYYY.MM.dd HH:mm", votes1[2].StartTime)
		endDate := jodaTime.Format("YYYY.MM.dd HH:mm", votes1[2].EndTime)
		choseproj = "2"
		msg := "*–û–ø–∏—Å–∞–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è:* \n" + votes1[2].Description + "\n"
		msg += "*–ù–∞—á–∞–ª–æ:* \n" + (startDate) + "\n"
		msg += "*–û–∫–æ–Ω—á–∞–Ω–∏–µ:* \n" + (endDate) + "\n"
		msg += "*–ó–∞–∫–æ–Ω—á–µ–Ω–æ –ª–∏:* \n"
		if votes1[2].End {
			msg += "–î–ê"
		} else {
			msg += "–ù–ï–¢"
		}
		b.Send(m.Sender, msg, &tb.SendOptions{ParseMode: "Markdown"}, &tb.ReplyMarkup{InlineKeyboard: yesno})
	})
	b.Handle("/vote3", func(m *tb.Message) {
		votes1 := mongo.FindAllVotes(session)
		startDate := jodaTime.Format("YYYY.MM.dd HH:mm", votes1[3].StartTime)
		endDate := jodaTime.Format("YYYY.MM.dd HH:mm", votes1[3].EndTime)
		choseproj = "3"
		msg := "*–û–ø–∏—Å–∞–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è:* \n" + votes1[3].Description + "\n"
		msg += "*–ù–∞—á–∞–ª–æ:* \n" + (startDate) + "\n"
		msg += "*–û–∫–æ–Ω—á–∞–Ω–∏–µ:* \n" + (endDate) + "\n"
		msg += "*–ó–∞–∫–æ–Ω—á–µ–Ω–æ –ª–∏:* \n"
		if votes1[3].End {
			msg += "–î–ê"
		} else {
			msg += "–ù–ï–¢"
		}
		b.Send(m.Sender, msg, &tb.SendOptions{ParseMode: "Markdown"}, &tb.ReplyMarkup{InlineKeyboard: yesno})
	})
	b.Handle("/vote4", func(m *tb.Message) {
		votes1 := mongo.FindAllVotes(session)
		startDate := jodaTime.Format("YYYY.MM.dd HH:mm", votes1[4].StartTime)
		endDate := jodaTime.Format("YYYY.MM.dd HH:mm", votes1[4].EndTime)
		choseproj = "4"
		msg := "*–û–ø–∏—Å–∞–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è:* \n" + votes1[4].Description + "\n"
		msg += "*–ù–∞—á–∞–ª–æ:* \n" + (startDate) + "\n"
		msg += "*–û–∫–æ–Ω—á–∞–Ω–∏–µ:* \n" + (endDate) + "\n"
		msg += "*–ó–∞–∫–æ–Ω—á–µ–Ω–æ –ª–∏:* \n"
		if votes1[4].End {
			msg += "–î–ê"
		} else {
			msg += "–ù–ï–¢"
		}
		b.Send(m.Sender, msg, &tb.SendOptions{ParseMode: "Markdown"}, &tb.ReplyMarkup{InlineKeyboard: yesno})
	})
	b.Handle("/vote5", func(m *tb.Message) {
		votes1 := mongo.FindAllVotes(session)
		startDate := jodaTime.Format("YYYY.MM.dd HH:mm", votes1[5].StartTime)
		endDate := jodaTime.Format("YYYY.MM.dd HH:mm", votes1[5].EndTime)
		choseproj = "5"
		msg := "*–û–ø–∏—Å–∞–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è:* \n" + votes1[5].Description + "\n"
		msg += "*–ù–∞—á–∞–ª–æ:* \n" + (startDate) + "\n"
		msg += "*–û–∫–æ–Ω—á–∞–Ω–∏–µ:* \n" + (endDate) + "\n"
		msg += "*–ó–∞–∫–æ–Ω—á–µ–Ω–æ –ª–∏:* \n"
		if votes1[5].End {
			msg += "–î–ê"
		} else {
			msg += "–ù–ï–¢"
		}
		b.Send(m.Sender, msg, &tb.SendOptions{ParseMode: "Markdown"}, &tb.ReplyMarkup{InlineKeyboard: yesno})
	})
	b.Handle("/vote6", func(m *tb.Message) {
		votes1 := mongo.FindAllVotes(session)
		startDate := jodaTime.Format("YYYY.MM.dd HH:mm", votes1[6].StartTime)
		endDate := jodaTime.Format("YYYY.MM.dd HH:mm", votes1[6].EndTime)
		choseproj = "6"
		msg := "*–û–ø–∏—Å–∞–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è:* \n" + votes1[6].Description + "\n"
		msg += "*–ù–∞—á–∞–ª–æ:* \n" + (startDate) + "\n"
		msg += "*–û–∫–æ–Ω—á–∞–Ω–∏–µ:* \n" + (endDate) + "\n"
		msg += "*–ó–∞–∫–æ–Ω—á–µ–Ω–æ –ª–∏:* \n"
		if votes1[6].End {
			msg += "–î–ê"
		} else {
			msg += "–ù–ï–¢"
		}
		b.Send(m.Sender, msg, &tb.SendOptions{ParseMode: "Markdown"}, &tb.ReplyMarkup{InlineKeyboard: yesno})
	})
	b.Handle("/vote7", func(m *tb.Message) {
		votes1 := mongo.FindAllVotes(session)
		startDate := jodaTime.Format("YYYY.MM.dd HH:mm", votes1[7].StartTime)
		endDate := jodaTime.Format("YYYY.MM.dd HH:mm", votes1[7].EndTime)
		choseproj = "7"
		msg := "*–û–ø–∏—Å–∞–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è:* \n" + votes1[7].Description + "\n"
		msg += "*–ù–∞—á–∞–ª–æ:* \n" + (startDate) + "\n"
		msg += "*–û–∫–æ–Ω—á–∞–Ω–∏–µ:* \n" + (endDate) + "\n"
		msg += "*–ó–∞–∫–æ–Ω—á–µ–Ω–æ –ª–∏:* \n"
		if votes1[7].End {
			msg += "–î–ê"
		} else {
			msg += "–ù–ï–¢"
		}
		b.Send(m.Sender, msg, &tb.SendOptions{ParseMode: "Markdown"}, &tb.ReplyMarkup{InlineKeyboard: yesno})
	})
	b.Handle("/vote8", func(m *tb.Message) {
		votes1 := mongo.FindAllVotes(session)
		startDate := jodaTime.Format("YYYY.MM.dd HH:mm", votes1[8].StartTime)
		endDate := jodaTime.Format("YYYY.MM.dd HH:mm", votes1[8].EndTime)
		choseproj = "8"
		msg := "*–û–ø–∏—Å–∞–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è:* \n" + votes1[8].Description + "\n"
		msg += "*–ù–∞—á–∞–ª–æ:* \n" + (startDate) + "\n"
		msg += "*–û–∫–æ–Ω—á–∞–Ω–∏–µ:* \n" + (endDate) + "\n"
		msg += "*–ó–∞–∫–æ–Ω—á–µ–Ω–æ –ª–∏:* \n"
		if votes1[8].End {
			msg += "–î–ê"
		} else {
			msg += "–ù–ï–¢"
		}
		b.Send(m.Sender, msg, &tb.SendOptions{ParseMode: "Markdown"}, &tb.ReplyMarkup{InlineKeyboard: yesno})
	})
	b.Handle("/vote9", func(m *tb.Message) {
		votes1 := mongo.FindAllVotes(session)
		startDate := jodaTime.Format("YYYY.MM.dd HH:mm", votes1[9].StartTime)
		endDate := jodaTime.Format("YYYY.MM.dd HH:mm", votes1[9].EndTime)
		choseproj = "9"
		msg := "*–û–ø–∏—Å–∞–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è:* \n" + votes1[9].Description + "\n"
		msg += "*–ù–∞—á–∞–ª–æ:* \n" + (startDate) + "\n"
		msg += "*–û–∫–æ–Ω—á–∞–Ω–∏–µ:* \n" + (endDate) + "\n"
		msg += "*–ó–∞–∫–æ–Ω—á–µ–Ω–æ –ª–∏:* \n"
		if votes1[9].End {
			msg += "–î–ê"
		} else {
			msg += "–ù–ï–¢"
		}
		b.Send(m.Sender, msg, &tb.SendOptions{ParseMode: "Markdown"}, &tb.ReplyMarkup{InlineKeyboard: yesno})
	})
	b.Handle("/vote10", func(m *tb.Message) {
		votes1 := mongo.FindAllVotes(session)
		startDate := jodaTime.Format("YYYY.MM.dd HH:mm", votes1[10].StartTime)
		endDate := jodaTime.Format("YYYY.MM.dd HH:mm", votes1[10].EndTime)
		choseproj = "10"
		msg := "*–û–ø–∏—Å–∞–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è:* \n" + votes1[10].Description + "\n"
		msg += "*–ù–∞—á–∞–ª–æ:* \n" + (startDate) + "\n"
		msg += "*–û–∫–æ–Ω—á–∞–Ω–∏–µ:* \n" + (endDate) + "\n"
		msg += "*–ó–∞–∫–æ–Ω—á–µ–Ω–æ –ª–∏:* \n"
		if votes1[10].End {
			msg += "–î–ê"
		} else {
			msg += "–ù–ï–¢"
		}
		b.Send(m.Sender, msg, &tb.SendOptions{ParseMode: "Markdown"}, &tb.ReplyMarkup{InlineKeyboard: yesno})
	})

	b.Handle(&yes, func(c *tb.Callback) {
		yesnores = "yes"
		userID := strconv.Itoa(c.Sender.ID)
		user := mongo.FindUser(session, userID)
		voters := mongo.FindAllVoters(session)
		var msg string
		check := 0
		num, _ := strconv.Atoi(choseproj)
		for key := range voters {
			if voters[key].Address == user.Address && voters[key].Num == num {
				check++
			}
		}

		if check != 1 {
			votes.Vote(choseproj, user.Address, "1")
			msg += "–í—ã –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏ *–∑–∞*, —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ"
		} else {
			msg += "–í—ã —É–∂–µ –≥–æ–ª–æ—Å–æ–≤–∞–ª–∏"
		}

		b.Edit(c.Message, msg, &tb.SendOptions{ParseMode: "Markdown"})
		b.Send(c.Sender, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", &tb.SendOptions{ParseMode: "Markdown"}, &tb.ReplyMarkup{ResizeReplyKeyboard: true, ReplyKeyboard: mainMenu})
		b.Respond(c, &tb.CallbackResponse{})
	})
	b.Handle(&no, func(c *tb.Callback) {
		yesnores = "yes"
		userID := strconv.Itoa(c.Sender.ID)
		user := mongo.FindUser(session, userID)
		voters := mongo.FindAllVoters(session)
		var msg string
		check := 0
		num, _ := strconv.Atoi(choseproj)
		for key := range voters {
			if voters[key].Address == user.Address && voters[key].Num == num {
				check++
			}
		}

		if check != 1 {
			votes.Vote(choseproj, user.Address, "0")
			msg += "–í—ã –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏ *–ø—Ä–æ—Ç–∏–≤*, —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ"
		} else {
			msg += "–í—ã —É–∂–µ –≥–æ–ª–æ—Å–æ–≤–∞–ª–∏"
		}

		b.Edit(c.Message, msg, &tb.SendOptions{ParseMode: "Markdown"})
		b.Send(c.Sender, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", &tb.SendOptions{ParseMode: "Markdown"}, &tb.ReplyMarkup{ResizeReplyKeyboard: true, ReplyKeyboard: mainMenu})
		b.Respond(c, &tb.CallbackResponse{})
	})
	b.Handle(&menu, func(c *tb.Callback) {
		yesnores = ""
		choseproj = ""
		b.Send(c.Sender, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", &tb.SendOptions{ParseMode: "Markdown"}, &tb.ReplyMarkup{ResizeReplyKeyboard: true, ReplyKeyboard: mainMenu})
		b.Respond(c, &tb.CallbackResponse{})
	})
	b.Handle(&viewRes, func(c *tb.Callback) {
		var msg = "–°–ø–∏—Å–æ–∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π, –∫—É–¥–∞ –≤ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏:\n\n"
		msg += "–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è: 1\n\n"
		msg += "–í–∞—à –≥–æ–ª–æ—Å: –¥–∞\n\n"
		msg += "–¢–µ–º–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è: 1\n\n"

		msg += "–ó–∞–≤–µ—Ä—à–µ–Ω: –¥–∞\n\n"
		msg += "–†–µ–∑—É–ª—å—Ç–∞—Ç: 70 –∑–∞ –∏ 30 –ø—Ä–æ—Ç–∏–≤\n\n"
		b.Edit(c.Message, msg, &tb.SendOptions{ParseMode: "Markdown"})

		var msg2 = "–í–∞—à –ø—É–±–ª–∏—á–Ω—ã–π –∞–¥—Ä–µ—Å: "
		// msg += addressPub
		msg2 += "\n\n–í–∞—à seed: "
		// msg += seed
		msg2 += "\n\n–í–∞—à –±–∞–ª–∞–Ω—Å: "
		// msg += balance
		msg2 += " (–†–£–ë)"
		msg2 += "\n\n–¢—É—Ç –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ—à–ª—ã—Ö –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–π"

		b.Send(c.Sender, msg2, &tb.SendOptions{ParseMode: "Markdown"}, &tb.ReplyMarkup{InlineKeyboard: viewMenu})
		b.Respond(c, &tb.CallbackResponse{})
	})
	b.Handle(&createVote, func(m *tb.Message) {
		var msg = "–ù–∞ —Ç–µ–∫—É—â–∏–π –º–æ–º–µ–Ω—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è –ª–∏—à—å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è —Ç–∏–ø–∞: –¥–∞ / –Ω–µ—Ç:\n\n"
		msg += "–ù–∞ –∫–∞–∫—É—é —Ç–µ–º–∞—Ç–∏–∫—É –±—É–¥–µ—Ç –≤–∞—à–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ? (–û–ø–∏—à–∏—Ç–µ –æ —á–µ–º –±—É–¥–µ—Ç –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ, —á—Ç–æ–±—ã —É—á–∞—Å—Ç–Ω–∏–∫–∏ –º–æ–≥–ª–∏ –æ—Ç–≤–µ—Ç–∏—Ç—å –ª–∏–±–æ –¥–∞, –ª–∏–±–æ –Ω–µ—Ç"
		enterName = true
		b.Send(m.Sender, msg, &tb.SendOptions{ParseMode: "Markdown"}, &tb.ReplyMarkup{ResizeReplyKeyboard: true, ReplyKeyboard: cancelMenu})
		b.Handle(tb.OnText, func(m *tb.Message) {
			if enterName {
				golosTheme = m.Text
				var msg1 = "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ —Å –¥–∞–Ω–Ω–æ–π —Ç–µ–º–∞—Ç–∏–∫–æ–π?"
				b.Send(m.Sender, msg1, &tb.SendOptions{ParseMode: "Markdown"}, &tb.ReplyMarkup{ResizeReplyKeyboard: true, ReplyKeyboard: voteyesno})
				enterName = false
			}
		})
	})
	b.Handle(&voteyes, func(m *tb.Message) {
		var msg = "–í–∞—à–∞ —Ç–µ–º–∞—Ç–∏–∫–∞ "
		msg += golosTheme
		enterData = true
		msg += "\n\n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –≤ *—á–∞—Å–∞—Ö* *(–ù–µ –±–æ–ª—å—à–µ 10 —á–∞—Å–æ–≤)*"
		b.Send(m.Sender, msg, &tb.SendOptions{ParseMode: "Markdown"}, &tb.ReplyMarkup{ResizeReplyKeyboard: true, ReplyKeyboard: cancelMenu})
		b.Handle(tb.OnText, func(m *tb.Message) {
			if enterData {
				var msg1 = "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –Ω–∞ "
				msg1 += m.Text
				golosData = m.Text
				msg1 += " —á."
				b.Send(m.Sender, msg1, &tb.SendOptions{ParseMode: "Markdown"}, &tb.ReplyMarkup{ResizeReplyKeyboard: true, ReplyKeyboard: voteyesno2})
				enterData = false
			}
		})
	})
	b.Handle(&voteyes2, func(m *tb.Message) {
		userID := strconv.Itoa(m.Sender.ID)
		votes.CreateVote(userID, golosTheme, golosData)
		b.Send(m.Sender, "–í—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–ª–∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ, –µ–≥–æ –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤ *—Ç–µ–∫—É—â–∏—Ö –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è—Ö* –∏–ª–∏ –≤ *–º–æ–∏—Ö –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è—Ö* –≤ *–º–æ–µ–º –∫–∞–±–∏–Ω–µ—Ç–µ*", &tb.SendOptions{ParseMode: "Markdown"}, &tb.ReplyMarkup{ResizeReplyKeyboard: true, ReplyKeyboard: mainMenu})
	})
	b.Handle(&voteno2, func(m *tb.Message) {
		golosData = ""
		enterData = false
		enterName = false
		b.Send(m.Sender, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", &tb.SendOptions{ParseMode: "Markdown"}, &tb.ReplyMarkup{ResizeReplyKeyboard: true, ReplyKeyboard: mainMenu})
	})
	b.Handle(&voteno, func(m *tb.Message) {
		golosTheme = ""
		golosData = ""
		enterData = false
		enterName = false
		b.Send(m.Sender, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", &tb.SendOptions{ParseMode: "Markdown"}, &tb.ReplyMarkup{ResizeReplyKeyboard: true, ReplyKeyboard: mainMenu})
	})
	b.Handle(&viewMy, func(c *tb.Callback) {
		var msg = "–°–ø–∏—Å–æ–∫ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –≤–∞–º–∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–π: \n\n"
		msg += "–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ 1\n"
		msg += "–¢–µ–º–∞—Ç–∏–∫–∞: \n"
		msg += "–°–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ –∫–æ–Ω—Ü–∞: \n"
		msg += "–ó–∞–≤–µ—Ä—à–µ–Ω: –Ω–µ—Ç\n"
		msg += "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã: "
		b.Edit(c.Message, msg, &tb.SendOptions{ParseMode: "Markdown"})
		var msg2 = "–í–∞—à –ø—É–±–ª–∏—á–Ω—ã–π –∞–¥—Ä–µ—Å: "
		// msg += addressPub
		msg2 += "\n\n–í–∞—à seed: "
		// msg += seed
		msg2 += "\n\n–í–∞—à –±–∞–ª–∞–Ω—Å: "
		// msg += balance
		msg2 += " (–†–£–ë)"
		msg2 += "\n\n–¢—É—Ç –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ—à–ª—ã—Ö –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–π"

		b.Send(c.Sender, msg2, &tb.SendOptions{ParseMode: "Markdown"}, &tb.ReplyMarkup{InlineKeyboard: viewMenu})
		b.Respond(c, &tb.CallbackResponse{})
	})

	b.Start()
	// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
}
